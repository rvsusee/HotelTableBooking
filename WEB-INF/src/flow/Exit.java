package flow;

import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;

import hotel.table.booking.DateTimeValidation;
import hotel.table.booking.dao.ConnectionPooling;

/**
 * Implements the return from an application. A Return class allows an
 * application to do some processing. If the application is invoked by another
 * application, then this class will define the parameters returned to the
 * calling application. Last generated by Orchestration Designer at: 2022-DEC-07
 * 12:09:34 PM
 */
public class Exit extends com.avaya.sce.runtime.Return {

	// {{START:CLASS:FIELDS
	// }}END:CLASS:FIELDS

	/**
	 * Default constructor Last generated by Orchestration Designer at: 2022-DEC-07
	 * 12:09:34 PM
	 */
	public Exit() {
		// {{START:CLASS:CONSTRUCTOR
		super();
		// }}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Builds the list of output parameters that are returned by this application
	 * This list is built automatically by defining Output Parameter nodes in the
	 * call flow editor.<BR>
	 *
	 * This method is generated automatically and changes to it may be overwritten
	 * next time code is generated.
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Parameter</code> objects
	 *         that the runtime will return to the calling application. If the node
	 *         does not have any output parameters, then this returns an empty list
	 *         Last generated by Orchestration Designer at: 2023-JAN-09 03:24:54 PM
	 */
	public java.util.Collection getOutputParams(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Parameter param = null;
		list = new java.util.ArrayList();

		return list;
	}

	/**
	 * Builds the list of prompts that are used by this flow item<br>
	 * This method is generated automatically and changes to it may be overwritten
	 * next time code is generated. To modify the list of prompts for the flow item,
	 * override: updatePrompts(Collection prompts, SCESession mySession)
	 * 
	 * @return list of prompts for the menu Last generated by Orchestration Designer
	 *         at: 2023-JAN-09 03:24:54 PM
	 */
	public java.util.Collection getPrompts(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		String ___tempPromptName = null;
		// Item has no prompts associated
		list = new java.util.ArrayList();

		return (list);
	}

	/**
	 * Builds the list of tracking items that are generated by this flow item<br>
	 * This method is generated automatically and changes to it may be overwritten
	 * next time code is generated.
	 * 
	 * @return list of tracking items for the item Last generated by Orchestration
	 *         Designer at: 2023-JAN-09 03:24:54 PM
	 */
	public java.util.Collection getTrackingActions(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;

		// Item has no tracking items.
		list = new java.util.ArrayList();
		return (list);
	}

	@Override
	public void requestBegin(SCESession mySession) {
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Applcation Flow Ended", mySession);

		LocalDateTime now = LocalDateTime.now();
		DateTimeFormatter format = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");

		String startDate = mySession.getVariableField(IProjectVariables.CALL_HISTORY_INFO,
				IProjectVariables.CALL_HISTORY_INFO_FIELD_START_DATE).getStringValue();
		String endDate = now.format(format);

		mySession.getVariableField(IProjectVariables.CALL_HISTORY_INFO,
				IProjectVariables.CALL_HISTORY_INFO_FIELD_END_DATE).setValue(endDate);
		mySession
				.getVariableField(IProjectVariables.CALL_HISTORY_INFO,
						IProjectVariables.CALL_HISTORY_INFO_FIELD_DURATION)
				.setValue(new DateTimeValidation(mySession).getDuration(startDate, endDate));

		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "----------------Flow Summary----------------", mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "UCID: " + mySession
				.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_UCID).getStringValue(),
				mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "CLID: " + mySession
				.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI).getStringValue(),
				mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Flow Name: " + "HotelTableBooking", mySession);

		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "DNIS: " + mySession
				.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS).getStringValue(),
				mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,
				"SESSION ID: " + mySession
						.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_SESSIONID)
						.getStringValue(),
				mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,
				"Start Date: " + mySession.getVariableField(IProjectVariables.CALL_HISTORY_INFO,
						IProjectVariables.CALL_HISTORY_INFO_FIELD_START_DATE).getStringValue(),
				mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,
				"End Date: " + mySession.getVariableField(IProjectVariables.CALL_HISTORY_INFO,
						IProjectVariables.CALL_HISTORY_INFO_FIELD_END_DATE).getStringValue(),
				mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,
				"Duration: " + mySession.getVariableField(IProjectVariables.CALL_HISTORY_INFO,
						IProjectVariables.CALL_HISTORY_INFO_FIELD_DURATION).getStringValue(),
				mySession);
		TraceInfo
				.trace(ITraceInfo.TRACE_LEVEL_INFO,
						"Exit Location: "
								+ mySession
										.getVariableField(IProjectVariables.CALL_HISTORY_INFO,
												IProjectVariables.CALL_HISTORY_INFO_FIELD_EXIT_LOCATION)
										.getStringValue(),
						mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,
				"End Reason: " + mySession.getVariableField(IProjectVariables.CALL_HISTORY_INFO,
						IProjectVariables.CALL_HISTORY_INFO_FIELD_END_REASON).getStringValue(),
				mySession);

		ConnectionPooling cp = new ConnectionPooling(mySession);

		try {
			cp.uploadDetails(queryGenerate(mySession));
		} catch (SQLException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Exception Occured " + e.toString(), mySession);
		}
	}

	private String queryGenerate(SCESession mySession) {

//		String getUcid = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_UCID)
//				.getStringValue();
		int ucid = 0;
//		if (!("undefined".equals(ucid))) {
//			ucid = Integer.parseInt(getUcid);
//		}

		int clid = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI)
				.getIntValue();
		String flow_name = "HotelTableBooking";

		int dnis = mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_DNIS)
				.getIntValue();
		String session_id = mySession
				.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_SESSIONID)
				.getStringValue();

		String start_date = mySession.getVariableField(IProjectVariables.CALL_HISTORY_INFO,
				IProjectVariables.CALL_HISTORY_INFO_FIELD_START_DATE).getStringValue();

		String end_date = mySession.getVariableField(IProjectVariables.CALL_HISTORY_INFO,
				IProjectVariables.CALL_HISTORY_INFO_FIELD_END_DATE).getStringValue();

		int duration = mySession.getVariableField(IProjectVariables.CALL_HISTORY_INFO,
				IProjectVariables.CALL_HISTORY_INFO_FIELD_DURATION).getIntValue();

		String exit_location = mySession.getVariableField(IProjectVariables.CALL_HISTORY_INFO,
				IProjectVariables.CALL_HISTORY_INFO_FIELD_EXIT_LOCATION).getStringValue();

		String end_reason = mySession.getVariableField(IProjectVariables.CALL_HISTORY_INFO,
				IProjectVariables.CALL_HISTORY_INFO_FIELD_END_REASON).getStringValue();

		String app_ip = mySession
				.getVariableField(IProjectVariables.CALL_HISTORY_INFO, IProjectVariables.CALL_HISTORY_INFO_FIELD_IP)
				.getStringValue();

		String query = "Exec Hotel_InsertCallHistory @ucid =" + ucid + " ,@flow_name = '" + flow_name + "', @clid = "
				+ clid + ", @dnis = " + dnis + ", @session_id = '" + session_id + "', @start_date = '" + start_date
				+ "',@end_date = '" + end_date + "', @duration = " + duration + ",@exit_location = '" + exit_location
				+ "',@end_reason = '" + end_reason + "',@app_ip = '" + app_ip + "';";

		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, query, mySession);
		return query;
	}

}
