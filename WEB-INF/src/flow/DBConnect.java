package flow;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;

/**
 * A basic servlet which allows a user to define their code, generate any
 * output, and to select where to transition to next. Last generated by
 * Orchestration Designer at: 2022-DEC-13 12:13:13 PM
 */
public class DBConnect extends com.avaya.sce.runtime.BasicServlet {

	// {{START:CLASS:FIELDS
	// }}END:CLASS:FIELDS

	/**
	 * Default constructor Last generated by Orchestration Designer at: 2022-DEC-13
	 * 12:13:13 PM
	 */
	public DBConnect() {
		// {{START:CLASS:CONSTRUCTOR
		super();
		// }}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components. You may
	 * use Java for sophisticated logic or to integrate with custom connectors (i.e.
	 * JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent
	 * delays. It's important to design your callflow so that the voice browser
	 * (Experienve Portal/IR) is not waiting too long for a response as this can
	 * lead to a poor caller experience. Additionally, if the response to the client
	 * voice browser exceeds the configured timeout, the platform may throw an
	 * "error.badfetch".
	 *
	 * Using this method, you have access to all session variables through the
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future. Last
	 * generated by Orchestration Designer at: 2022-DEC-13 12:13:13 PM
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {

		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "DBConnect Node Started", mySession);
		try {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "Try to Connect Database Start", mySession);
			Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
			Connection conn = DriverManager.getConnection(
					"jdbc:sqlserver://192.168.168.12:1433;databaseName=New_joinee_2022;encrypt=true;trustServerCertificate=true;",
					"NewJoinee2022", "P@ssw0rd");
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select * from SUSEENDHIRAN_EMPLOYEES;");
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "+++", mySession);
			while (rs.next()) {
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, rs.getInt(1) + " " + rs.getString(2), mySession);
				System.out.println("Value :" + rs.getInt(1) + " " + rs.getString(2));
			}
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "Database Connected Successfully", mySession);
			stmt.close();
			rs.close();
			conn.close();
		} catch (Exception e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "Unable to Connect Database" + e, mySession);
			e.printStackTrace();
		}

//		String getDatePCValue = mySession
//				.getVariableField(IProjectVariables.GET_DATE_PC, IProjectVariables.GET_DATE_PC_FIELD_VALUE)
//				.getStringValue();
//		System.out.println(getDatePCValue);
//		DateFormat dateFormat = new SimpleDateFormat("ddMMyyyy");
//		dateFormat.setLenient(false);
//		try {
//			dateFormat.parse(getDatePCValue);
//			mySession.getVariableField(IProjectVariables.BOOKING_DETAILS,
//					IProjectVariables.BOOKING_DETAILS_FIELD_DATE_VALIDATION).setValue("yes");
//		} catch (Exception e) {
//			mySession.getVariableField(IProjectVariables.BOOKING_DETAILS,
//					IProjectVariables.BOOKING_DETAILS_FIELD_DATE_VALIDATION).setValue("no");
//			// TODO: handle exception
//		}
//
		// TODO: Add your code here!

	}

	/**
	 * Builds the list of branches that are defined for this servlet object. This
	 * list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled
	 * Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate. If there is not at least one enabled Goto item, the
	 * framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may be overwritten
	 * next time code is generated. To modify the list of branches for the flow
	 * item, override:
	 * <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code> objects that
	 *         will be evaluated at runtime. If there are no gotos defined in the
	 *         Servlet node, then this returns null. Last generated by Orchestration
	 *         Designer at: 2022-DEC-17 05:44:30 PM
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("AddBooking-DateValidater", 0, true, "Default");
		list.add(aGoto);

		return list;
	}

	@Override
	public void requestBegin(SCESession mySession) {
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "DBConnect Node Started", mySession);
		try {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "Try to Connect Database Start", mySession);
			Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
			Connection conn = DriverManager.getConnection(
					"jdbc:sqlserver://192.168.168.12:1433;databaseName=New_joinee_2022;encrypt=true;trustServerCertificate=true;",
					"NewJoinee2022", "P@ssw0rd");
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select * from SUSEENDHIRAN_EMPLOYEES;");
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "+++", mySession);
			while (rs.next()) {
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, rs.getInt(1) + " " + rs.getString(2), mySession);
				System.out.println("Value :" + rs.getInt(1) + " " + rs.getString(2));
			}
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "Database Connected Successfully", mySession);
			stmt.close();
			rs.close();
			conn.close();
		} catch (Exception e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "Unable to Connect Database" + e, mySession);
			e.printStackTrace();
		}
	}
}
