package flow;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;

/**
 * Class that represents a menu. A menu can contain prompts, choices and links
 * as well as handlers for various events that may occur while the menu is
 * executing Last generated by Orchestration Designer at: 2022-DEC-07 12:26:37
 * PM
 */
public class LanguageMenu extends com.avaya.sce.runtime.Menu {

	// {{START:CLASS:FIELDS
	// }}END:CLASS:FIELDS

	/**
	 * Default constructor Last generated by Orchestration Designer at: 2022-DEC-07
	 * 12:26:37 PM
	 */
	public LanguageMenu() {
		// {{START:CLASS:CONSTRUCTOR
		super();
		setNeedsDefaultDisconnectHandler(false);
		// }}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method is generated automatically and should not be manually edited. To
	 * manually edit the links for the node, override: void updateLinks(Collection
	 * links, SCESession mySession) Last generated by Orchestration Designer at:
	 * 2022-DEC-19 10:59:42 AM
	 * 
	 * @return a collection of links
	 */
	public java.util.Collection getLinks(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Link link;
		java.util.List list;
		java.util.Collection grammarInfo = null;
		java.util.Collection<com.avaya.sce.runtime.CaptureExpression> captureExpr = null;
		// This item does not have any defined links
		list = new java.util.ArrayList();
		String ___tempGrammarName = null;

		return (list);
	}

	/**
	 * This method is generated automatically and should not be manually edited. To
	 * manually edit the properties for the node, override: void
	 * updateProperties(Collection properties, SCESession mySession) Last generated
	 * by Orchestration Designer at: 2022-DEC-19 10:59:42 AM
	 * 
	 * @return a collection of properties
	 */
	public java.util.Collection getProperties(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Property property;
		java.util.List list;
		// This item does not have any defined properties
		list = new java.util.ArrayList();

		return (list);
	}

	/**
	 * This method is generated automatically and should not be manually edited. To
	 * manually edit the event handlers for the node, override: void
	 * updateEvents(Collection events, SCESession mySession) Last generated by
	 * Orchestration Designer at: 2022-DEC-19 10:59:42 AM
	 * 
	 * @return a collection of Events
	 */
	public java.util.Collection getEvents(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list;
		com.avaya.sce.runtime.Event event;
		list = new java.util.ArrayList(2);
		java.util.List eventPromptNames = null;
		String ___tempPromptName = null;

		// build the list of prompt names
		eventPromptNames = new java.util.ArrayList(1);

		eventPromptNames.add(new com.avaya.sce.runtime.PromptRefInfo("LanguageMenuNoInput", ""));

		event = new com.avaya.sce.runtime.Event(com.avaya.sce.runtimecommon.SCERT.EVENT_NOINPUT,
				(com.avaya.sce.runtime.PromptRefInfo[]) eventPromptNames
						.toArray(new com.avaya.sce.runtime.PromptRefInfo[0]),
				new com.avaya.sce.runtime.Goto("DefLangSet", 0, true, ""));
		list.add(event);

		// build the list of prompt names
		eventPromptNames = new java.util.ArrayList(1);

		eventPromptNames.add(new com.avaya.sce.runtime.PromptRefInfo("LanguageMenuNoMatch", ""));

		event = new com.avaya.sce.runtime.Event(com.avaya.sce.runtimecommon.SCERT.EVENT_NOMATCH,
				(com.avaya.sce.runtime.PromptRefInfo[]) eventPromptNames
						.toArray(new com.avaya.sce.runtime.PromptRefInfo[0]),
				new com.avaya.sce.runtime.Goto("LangAtmt", 0, true, ""));
		list.add(event);
		return (list);
	}

	/**
	 * Builds the list of choices for the menu. This list is built automatically by
	 * the code generator and should not be edited manually. Future code generation
	 * may overwrite any changes to this method.<br>
	 * To modify the list of choices, override:<br>
	 * updateChoices(Collection choices, SCESession mySession) Last generated by
	 * Orchestration Designer at: 2022-DEC-19 10:59:42 AM
	 */
	public java.util.Collection getChoices(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Choice choice = null;
		java.util.Collection grammarInfo = null;
		list = new java.util.ArrayList(4);
		String ___tempGrammarName = null;

		// build the list of grammar information objects for the choice
		grammarInfo = new java.util.ArrayList();

		choice = new com.avaya.sce.runtime.Choice("EnglishChoice", "1", true, "exact", "ResetAtmt", grammarInfo, true);
		list.add(choice);

		// build the list of grammar information objects for the choice
		grammarInfo = new java.util.ArrayList();

		choice = new com.avaya.sce.runtime.Choice("HindiChoice", "2", true, "exact", "ResetAtmt", grammarInfo, true);
		list.add(choice);

		// build the list of grammar information objects for the choice
		grammarInfo = new java.util.ArrayList();

		choice = new com.avaya.sce.runtime.Choice("TamilChoice", "3", true, "exact", "ResetAtmt", grammarInfo, true);
		list.add(choice);

		// build the list of grammar information objects for the choice
		grammarInfo = new java.util.ArrayList();

		choice = new com.avaya.sce.runtime.Choice("ExitChoice", "0", true, "exact", "Disconnect", grammarInfo, true);
		list.add(choice);

		return (list);
	}

	/**
	 * Builds the list of prompts that are used by this flow item<br>
	 * This method is generated automatically and changes to it may be overwritten
	 * next time code is generated. To modify the list of prompts for the flow item,
	 * override: updatePrompts(Collection prompts, SCESession mySession)
	 * 
	 * @return list of prompts for the menu Last generated by Orchestration Designer
	 *         at: 2022-DEC-19 10:59:42 AM
	 */
	public java.util.Collection getPrompts(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		String ___tempPromptName = null;
		// build the list of prompt names
		list = new java.util.ArrayList(1);

		list.add(new com.avaya.sce.runtime.PromptRefInfo("LanguageMenu", ""));

		return (list);
	}

	/**
	 * Builds the list of tracking items that are generated by this flow item<br>
	 * This method is generated automatically and changes to it may be overwritten
	 * next time code is generated.
	 * 
	 * @return list of tracking items for the item Last generated by Orchestration
	 *         Designer at: 2022-DEC-19 10:59:42 AM
	 */
	public java.util.Collection getTrackingActions(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;

		// Item has no tracking items.
		list = new java.util.ArrayList();
		return (list);
	}

	@Override
	public void requestBegin(SCESession mySession) {
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Language Menu Node", mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "DatabaseConnection started", mySession);
		Connection connection = null;
		try {
			Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
			connection = DriverManager.getConnection("jdbc:sqlserver://192.168.168.12;databaseName=New_joinee_2022",
					"NewJoinee2022", "P@ssw0rd");
			try {
				Statement stmt = connection.createStatement();
				stmt.execute("insert into survey_response(customer_name,question1,question2,question3,question4)values('kumar','good','bad','average','good')");

				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Database accessed succesfully", mySession);
				stmt.close();
			} catch (Exception e) {
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "exception occoured", mySession);
			}
		} catch (Exception e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Database Connection Failed" + e.getMessage(), mySession);
		}finally {
			try {
				connection.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}

//	@Override
//	public void requestBegin(SCESession mySession) {
//		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Language Menu Started", mySession);
////		get database values from properties file
//		String path = "D:\\AVAYA Project\\HotelTableBooking\\data\\Database.properties";
//		try {
//			FileInputStream fileInput = new FileInputStream(new File(path));
//			Properties properties = new Properties();
//			properties.load(fileInput);
//			Object url = properties.get("database.url");
//			fileInput.close();
//		} catch (FileNotFoundException e) {
//			e.printStackTrace();
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
//
//		
////		connect database
//		
//		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Upload Booking Details form Database", mySession);
//		try {
//			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "Try to Connect Database Start", mySession);
//			Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
//			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "after", mySession);
//			Connection conn = DriverManager.getConnection(
//					"jdbc:sqlserver://192.168.168.12:1433;databaseName=New_joinee_2022;encrypt=true;trustServerCertificate=true;",
//					"NewJoinee2022", "P@ssw0rd");
//			Statement stmt = conn.createStatement();
//			ResultSet rs = stmt.executeQuery("select * from SUSEENDHIRAN_EMPLOYEES;");
//			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "+++", mySession);
//			while (rs.next()) {
//				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, rs.getInt(1) + " " + rs.getString(2), mySession);
//				System.out.println("Value :" + rs.getInt(1) + " " + rs.getString(2));
//			}
//			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "Database Connected Successfully", mySession);
//			stmt.close();
//			rs.close();
//			conn.close();
//		} catch (Exception e) {
//			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, "Unable to Connect Database" + e, mySession);
//			e.printStackTrace();
//		}

//		String bookingNo = mySession.getVariableField(IProjectVariables.BOOKING_NO).getStringValue();
//	
//		String noPerson = mySession
//				.getVariableField(IProjectVariables.GET_NO_PERSON_PC, IProjectVariables.GET_NO_PERSON_PC_FIELD_VALUE)
//				.getStringValue();
//	
//		String bkDate = mySession
//				.getVariableField(IProjectVariables.GET_DATE_PC, IProjectVariables.GET_DATE_PC_FIELD_VALUE)
//				.getStringValue();
//		String bkTime = mySession
//				.getVariableField(IProjectVariables.GET_TIME_PC, IProjectVariables.GET_TIME_PC_FIELD_VALUE)
//				.getStringValue();
//	
//		String bkDuration = mySession
//				.getVariableField(IProjectVariables.GET_DURATION_PC, IProjectVariables.GET_DURATION_PC_FIELD_VALUE)
//				.getStringValue();
//	}
}
