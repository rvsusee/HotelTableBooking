package flow;

import org.json.JSONException;
import org.json.JSONObject;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;

import hotel.table.booking.dao.PinHashing;
import hotel.table.booking.dao.WebService;
import hotel.table.booking.model.Customer;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing
 * mathematic operations, and collection iteration), conditional evaluation to
 * control callflow execution based on variable values, and logging/tracing
 * statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted. If no "true"
 * conditions are encountered, then all data actions will be executed/evaluated
 * and the application will proceed to the "Default" servlet. Last generated by
 * Orchestration Designer at: 2023-FEB-01 04:25:05 PM
 */
public class CustomerAuth extends com.avaya.sce.runtime.Data {

	// {{START:CLASS:FIELDS
	// }}END:CLASS:FIELDS

	/**
	 * Default constructor Last generated by Orchestration Designer at: 2023-FEB-01
	 * 04:25:05 PM
	 */
	public CustomerAuth() {
		// {{START:CLASS:CONSTRUCTOR
		super();
		// }}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2023-FEB-03  11:55:30 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}

	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2023-FEB-03  11:55:30 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}

	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2023-FEB-03  11:55:30 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "validation:isLogin", com.avaya.sce.runtime.Expression.STRING_NOT_EQUAL, "true", false).setDebugId(831)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Login Failed", "").setDebugId(835));
			actions.add(new com.avaya.sce.runtime.Next("AttemptValidation", "Failed").setDebugId(809));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(3);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("validation:attemptCount", "0", true).setDebugId(856));
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_INFO, "Login Success", "").setDebugId(833));
			actions.add(new com.avaya.sce.runtime.Next("MainMenu", "Success").setDebugId(832));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}

	@Override
	public void requestBegin(SCESession mySession) {
		super.requestBegin(mySession);

		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "CustomerAuth DataNode Started", mySession);

		String isExistCustomer = mySession
				.getVariableField(IProjectVariables.VALIDATION, IProjectVariables.VALIDATION_FIELD_IS_EXIST_CUSTOMER)
				.getStringValue();

		if ("true".equals(isExistCustomer)) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Existing Customer", mySession);

			int inputPinNumber = mySession
					.getVariableField(IProjectVariables.PIN_PC, IProjectVariables.PIN_PC_FIELD_VALUE).getIntValue();
			String hashedInputPinValue = new PinHashing().getHashValue(inputPinNumber);

			String pinDB = mySession
					.getVariableField(IProjectVariables.CUSTOMER_DETAILS, IProjectVariables.CUSTOMER_DETAILS_FIELD_PIN)
					.getStringValue();

			if (hashedInputPinValue.equals(pinDB)) {
				mySession.getVariableField(IProjectVariables.VALIDATION, IProjectVariables.VALIDATION_FIELD_IS_LOGIN)
						.setValue(true);
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Login - Success", mySession);

			} else {
				mySession.getVariableField(IProjectVariables.VALIDATION, IProjectVariables.VALIDATION_FIELD_IS_LOGIN)
						.setValue(false);
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Login - Failed", mySession);
			}

		} else {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "New Customer", mySession);
			try {
				int inputPinNumber = mySession
						.getVariableField(IProjectVariables.PIN_PC, IProjectVariables.PIN_PC_FIELD_VALUE).getIntValue();
				String hashedInputPinValue = new PinHashing().getHashValue(inputPinNumber);
				long mobileNumber = Long.parseLong(
						mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_ANI)
								.getStringValue());
				WebService service = new WebService(mySession);
				JSONObject response = service.doPost("customer/register",
						new JSONObject(new Customer(mobileNumber, hashedInputPinValue)).toString());
				if (response != null) {
					if (response.getInt("httpStatus") == 202) {
						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Account Created Success", mySession);
						mySession.getVariableField(IProjectVariables.VALIDATION,
								IProjectVariables.VALIDATION_FIELD_IS_EXIST_CUSTOMER).setValue(true);
						mySession.getVariableField(IProjectVariables.VALIDATION,
								IProjectVariables.VALIDATION_FIELD_IS_LOGIN).setValue(true);
						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,
								"Create New Account - Success \n Reason \n : " + response, mySession);
					} else {
						mySession.getVariableField(IProjectVariables.VALIDATION,
								IProjectVariables.VALIDATION_FIELD_IS_EXIST_CUSTOMER).setValue(false);
						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,
								"Create New Account - Failed \n Reason \n : " + response, mySession);
					}
				} else {
					mySession.getVariableField(IProjectVariables.VALIDATION,
							IProjectVariables.VALIDATION_FIELD_IS_EXIST_CUSTOMER).setValue(false);
					System.out.println("JSON RESPONSE NULL");
				}
			} catch (JSONException err) {
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_FATAL, "JSONException : " + err.getLocalizedMessage(),
						mySession);
			} catch (Exception err) {
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_FATAL, "Exception : " + err.getLocalizedMessage(), mySession);
			}
		}
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "CustomerAuth DataNode Ended", mySession);
	}
}
