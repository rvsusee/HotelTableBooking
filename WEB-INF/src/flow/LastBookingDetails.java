package flow;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;

/**
 * This servlet is used to forward the request to the entry point of a project
 * callflow (subflow). Last generated by Orchestration Designer at: 2022-DEC-07
 * 03:18:23 PM
 */
public class LastBookingDetails extends com.avaya.sce.runtime.Subflow {

	// {{START:CLASS:FIELDS
	// }}END:CLASS:FIELDS

	/**
	 * Default constructor Last generated by Orchestration Designer at: 2022-DEC-07
	 * 03:18:23 PM
	 */
	public LastBookingDetails() {
		// {{START:CLASS:CONSTRUCTOR
		super();
		// }}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the name of the subflow that is being invoked.  This name is used for
	 * determining the URL mapping for the the entry point of the subflow..
	 *
	 * @return the name of the subflow
	 * Last generated by Orchestration Designer at: 2022-DEC-28  06:30:41 PM
	 */
	protected String getSubflowName() {
		return("BookingDetails");
	}

	/**
	 * Returns the name of the mapping of sub flow exit points to the URL mappings
	 * of the servlets to return back to in the calling flow.
	 *
	 * @return map of sub flow exit points to servlets in the calling flow. Last
	 *         generated by Orchestration Designer at: 2022-DEC-26 02:49:23 PM
	 */

	@Override
	public void requestBegin(SCESession mySession) {
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "LastBookingDetails Node", mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Access Properties File started", mySession);
		String path = "D:\\AVAYA Project\\Speech_Testing\\data\\Database.properties";
		String DBUrl, DBDriver, DBUserName, DBPassword;
		try {
			FileInputStream fileInput = new FileInputStream(new File(path));
			Properties properties = new Properties();
			properties.load(fileInput);
			DBUrl = properties.getProperty("database.url");
			DBDriver = properties.getProperty("database.driverClassName");
			DBUserName = properties.getProperty("database.username");
			DBPassword = properties.getProperty("database.password");
			fileInput.close();
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,
					"\nDatas : " + DBUrl + " " + DBDriver + " " + DBUserName + " " + DBPassword, mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Access Properties File Ended", mySession);

			dbOperation(DBUrl, DBDriver, DBUserName, DBPassword, mySession);

		} catch (FileNotFoundException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Access Properties Failed : FileNotFound" + e.getMessage(),
					mySession);
		} catch (IOException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Access Properties Failed : IOException" + e.getMessage(),
					mySession);
			e.printStackTrace();
		}
	}

	private void dbOperation(String DBUrl, String DBDriver, String DBUserName, String DBPassword,
			SCESession mySession) {
		try {
			Class.forName(DBDriver);
			Connection connection = DriverManager.getConnection(DBUrl, DBUserName, DBPassword);
			Statement stmt = connection.createStatement();
			ResultSet resultSet = stmt.executeQuery("\n" + "exec SUSEENDHIRAN_HOTEL_TABLE_BOOKING_GETLAST_BK_DETAILS;");
			setValues(resultSet.getInt(1), resultSet.getInt(3), resultSet.getString(4), resultSet.getString(5),
					resultSet.getInt(6), mySession);
			resultSet.close();
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,
					"Booking No Generated Successfully. No:" + (resultSet.getInt(1) + 1), mySession);
			stmt.close();
			connection.close();
		} catch (SQLException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Unable to Connect Database" + e.getMessage(), mySession);
		} catch (ClassNotFoundException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR,
					"Unable to Connect Database - ClassNotFoundException" + e.getMessage(), mySession);
		}
	}

	private void setValues(int bookingNo, int noPerson, String bookingDate, String bookingTime, int duration,
			SCESession mySession) {
		mySession
				.getVariableField(IProjectVariables.BOOKING_DETAILS, IProjectVariables.BOOKING_DETAILS_FIELD_BOOKING_NO)
				.setValue(bookingNo);
		mySession.getVariableField(IProjectVariables.GET_NO_PERSON_PC, IProjectVariables.GET_NO_PERSON_PC_FIELD_VALUE)
				.setValue(noPerson);
		mySession.getVariableField(IProjectVariables.GET_NO_PERSON_PC, IProjectVariables.GET_NO_PERSON_PC_FIELD_VALUE)
				.setValue(bookingDate);
		mySession.getVariableField(IProjectVariables.GET_NO_PERSON_PC, IProjectVariables.GET_NO_PERSON_PC_FIELD_VALUE)
				.setValue(bookingTime);
		mySession.getVariableField(IProjectVariables.GET_NO_PERSON_PC, IProjectVariables.GET_NO_PERSON_PC_FIELD_VALUE)
				.setValue(duration);
	}
	/**
	 * Returns the name of the mapping of sub flow exit points to the URL mappings
	 * of the servlets to return back to in the calling flow.
	 *
	 * @return map of sub flow exit points to servlets in the calling flow.
	 * Last generated by Orchestration Designer at: 2022-DEC-28  06:30:41 PM
	 */
	protected java.util.Map<String,String> getExitPoints() {
		java.util.Map<String, String> exitPoints;
		exitPoints = new java.util.HashMap<String, String>();
		exitPoints.put("BookingDetails-Return", "EngSubMenu");
		return exitPoints;
	}
}
