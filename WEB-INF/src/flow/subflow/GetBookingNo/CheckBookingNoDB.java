package flow.subflow.GetBookingNo;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing
 * mathematic operations, and collection iteration), conditional evaluation to
 * control callflow execution based on variable values, and logging/tracing
 * statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted. If no "true"
 * conditions are encountered, then all data actions will be executed/evaluated
 * and the application will proceed to the "Default" servlet. Last generated by
 * Orchestration Designer at: 2022-DEC-26 12:32:34 PM
 */
public class CheckBookingNoDB extends com.avaya.sce.runtime.Data {

	// {{START:CLASS:FIELDS
	// }}END:CLASS:FIELDS

	/**
	 * Default constructor Last generated by Orchestration Designer at: 2022-DEC-26
	 * 12:32:34 PM
	 */
	public CheckBookingNoDB() {
		// {{START:CLASS:CONSTRUCTOR
		super();
		// }}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2023-JAN-05  05:30:17 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}

	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2023-JAN-05  05:30:17 PM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}

	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2023-JAN-05  05:30:17 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.varoperations.Assign("GetBookingNoPC:value", "BookingDetails:BookingNo", false).setDebugId(50));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "validation:attemptCount", com.avaya.sce.runtime.Expression.STRING_EQUAL, "true", false).setDebugId(52)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("GetBookingNo-CorrectBkNo", "CorrectBookingNo").setDebugId(53));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "validation:attemptCount", com.avaya.sce.runtime.Expression.STRING_GREATER_THAN, "3", false).setDebugId(57)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("GetBookingNo-atmtEndAcmt", "atmtEnd").setDebugId(58));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Increment("validation:attemptCount").setDebugId(62));
			actions.add(new com.avaya.sce.runtime.Next("GetBookingNo-GetBookingNoPC", "haveAtmt").setDebugId(61));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}

	@Override
	public void requestBegin(SCESession mySession) {
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "CheckBookingDB Node", mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Access Properties File started", mySession);
		String path = "D:\\AVAYA Project\\Speech_Testing\\data\\Database.properties";
		String DBUrl, DBDriver, DBUserName, DBPassword;
		try {
			FileInputStream fileInput = new FileInputStream(new File(path));
			Properties properties = new Properties();
			properties.load(fileInput);
			DBUrl = properties.getProperty("database.url");
			DBDriver = properties.getProperty("database.driverClassName");
			DBUserName = properties.getProperty("database.username");
			DBPassword = properties.getProperty("database.password");
			fileInput.close();
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,
					"\nDatas : " + DBUrl + " " + DBDriver + " " + DBUserName + " " + DBPassword, mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Access Properties File Ended", mySession);

			dbOperation(DBUrl, DBDriver, DBUserName, DBPassword, mySession);

		} catch (FileNotFoundException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Access Properties Failed : FileNotFound" + e.getMessage(),
					mySession);
		} catch (IOException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Access Properties Failed : IOException" + e.getMessage(),
					mySession);
			e.printStackTrace();
		}
	}

	private void dbOperation(String DBUrl, String DBDriver, String DBUserName, String DBPassword,
			SCESession mySession) {
		try {
			Class.forName(DBDriver);
			Connection connection = DriverManager.getConnection(DBUrl, DBUserName, DBPassword);
			Statement stmt = connection.createStatement();
			int userEnteredBkNo = mySession.getVariableField(IProjectVariables.GET_BOOKING_NO_PC,
					IProjectVariables.GET_BOOKING_NO_PC_FIELD_VALUE).getIntValue();
			ResultSet resultSet = stmt
					.executeQuery("exec SUSEENDHIRAN_HOTEL_TABLE_BOOKING_GET_BK_DETAILS " + userEnteredBkNo);
			if (resultSet.next()) {
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Booking Details is found from DB: " + userEnteredBkNo,
						mySession);
				setValues(resultSet.getInt(1), resultSet.getInt(3), resultSet.getString(4), resultSet.getString(5),
						resultSet.getInt(6), mySession);
//				mySession.getVariableField(IProjectVariables.VALIDATION,
//						IProjectVariables.VALIDATION_FIELD_CANCEL_BOOKING_VALIDATION).setValue("true");
			} else {
//				mySession.getVariableField(IProjectVariables.VALIDATION,
//						IProjectVariables.VALIDATION_FIELD_CANCEL_BOOKING_VALIDATION).setValue("false");
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Booking number is Not found from DB: " + userEnteredBkNo,
						mySession);
			}
			resultSet.close();
			stmt.close();
			connection.close();
		} catch (SQLException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Unable to Connect Database" + e.getMessage(), mySession);
		} catch (ClassNotFoundException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR,
					"Unable to Connect Database - ClassNotFoundException" + e.getMessage(), mySession);
		}
	}

	private void setValues(int bookingNo, int noPerson, String bookingDate, String bookingTime, int duration,
			SCESession mySession) {
		mySession
				.getVariableField(IProjectVariables.BOOKING_DETAILS, IProjectVariables.BOOKING_DETAILS_FIELD_BOOKING_NO)
				.setValue(bookingNo);
		mySession.getVariableField(IProjectVariables.BOOKING_DETAILS, IProjectVariables.BOOKING_DETAILS_FIELD_PERSONS)
				.setValue(noPerson);
		mySession.getVariableField(IProjectVariables.BOOKING_DETAILS, IProjectVariables.BOOKING_DETAILS_FIELD_DATE)
				.setValue(bookingDate);
		mySession.getVariableField(IProjectVariables.BOOKING_DETAILS, IProjectVariables.BOOKING_DETAILS_FIELD_TIME)
				.setValue(bookingTime);
		mySession.getVariableField(IProjectVariables.BOOKING_DETAILS, IProjectVariables.BOOKING_DETAILS_FIELD_DURATION)
				.setValue(duration);
	}
}